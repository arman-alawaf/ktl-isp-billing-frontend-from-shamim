{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { loginStart, loginSuccess, loginFailure, logout as logoutAction } from '../store/authSlice';\nimport api from '../services/api';\nexport const useAuth = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    user,\n    isAuthenticated,\n    loading\n  } = useSelector(state => state.auth);\n  const [authChecked, setAuthChecked] = useState(false);\n\n  // Verify token on mount with improved deduplication\n  useEffect(() => {\n    let isMounted = true;\n    let verificationInProgress = false;\n    const verifyToken = async () => {\n      if (verificationInProgress) {\n        console.log('Verification already in progress, skipping...');\n        return;\n      }\n      const token = localStorage.getItem('authToken');\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!token || !refreshToken) {\n        if (isMounted) {\n          setAuthChecked(true);\n        }\n        return;\n      }\n      verificationInProgress = true;\n      try {\n        console.log('Starting token verification...');\n        // Verify token with backend\n        const response = await api.post('/auth/verify/', {});\n        const {\n          user,\n          expires_at\n        } = response.data.data;\n        console.log('Token verification successful, updating state...');\n        console.log('User data from API:', user);\n        console.log('User type:', user === null || user === void 0 ? void 0 : user.user_type);\n\n        // Update Redux state with verified user data\n        dispatch(loginSuccess({\n          user,\n          access: token,\n          refresh: refreshToken,\n          expires_at\n        }));\n        console.log('Redux state updated with user data');\n      } catch (error) {\n        if (error.code === 'ERR_CANCELED') {\n          console.log('Token verification was canceled (duplicate request)');\n          return;\n        }\n        console.error('Token verification failed:', error);\n        // Token is invalid, clear local storage and Redux state\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('rememberMe');\n        dispatch(loginFailure('Session expired'));\n      } finally {\n        verificationInProgress = false;\n        if (isMounted) {\n          setAuthChecked(true);\n        }\n      }\n    };\n\n    // Use a longer delay to ensure all components are mounted\n    const timeoutId = setTimeout(verifyToken, 200);\n    return () => {\n      isMounted = false;\n      clearTimeout(timeoutId);\n    };\n  }, [dispatch]);\n  const login = async credentials => {\n    try {\n      dispatch(loginStart());\n      const response = await api.post('/auth/login/', credentials);\n      const {\n        user,\n        tokens,\n        remember_me,\n        expires_at\n      } = response.data.data;\n\n      // Store tokens and user data\n      localStorage.setItem('authToken', tokens.access);\n      localStorage.setItem('refreshToken', tokens.refresh);\n      if (remember_me) {\n        localStorage.setItem('rememberMe', 'true');\n      }\n      dispatch(loginSuccess({\n        user,\n        access: tokens.access,\n        refresh: tokens.refresh,\n        expires_at\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      dispatch(loginFailure(errorMessage));\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await api.post('/auth/refresh/', {\n        refresh_token: refreshToken\n      });\n      const {\n        tokens,\n        expires_at\n      } = response.data.data;\n\n      // Update tokens\n      localStorage.setItem('authToken', tokens.access);\n      localStorage.setItem('refreshToken', tokens.refresh);\n\n      // Update Redux state with current user data\n      dispatch(loginSuccess({\n        user: user,\n        // Keep existing user data\n        access: tokens.access,\n        refresh: tokens.refresh,\n        expires_at\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      // If refresh fails, logout user\n      await logout();\n      return {\n        success: false,\n        error: 'Session expired'\n      };\n    }\n  };\n  const logout = async (logoutAllDevices = false) => {\n    try {\n      console.log('Starting logout process...');\n      const refreshToken = localStorage.getItem('refreshToken');\n      console.log('Refresh token found:', !!refreshToken);\n      if (refreshToken) {\n        console.log('Calling logout API...');\n        await api.post('/auth/logout/', {\n          refresh_token: refreshToken,\n          logout_all_devices: logoutAllDevices\n        });\n        console.log('Logout API call successful');\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with logout even if API call fails\n    }\n    console.log('Clearing local storage and Redux state...');\n    // Clear local storage\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('rememberMe');\n\n    // Clear Redux state\n    dispatch(logout());\n\n    // Reset auth checked state for next login\n    setAuthChecked(false);\n    console.log('Redirecting to login...');\n    // Force redirect to login\n    window.location.replace('/login');\n  };\n  return {\n    user,\n    isAuthenticated: isAuthenticated || false,\n    loading: loading || false,\n    authChecked,\n    login,\n    logout,\n    refreshToken\n  };\n};\n_s(useAuth, \"aKiZGx5z0PRmM5KGXGfbLmF02C4=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useSelector","useDispatch","useState","useEffect","loginStart","loginSuccess","loginFailure","logout","logoutAction","api","useAuth","_s","dispatch","user","isAuthenticated","loading","state","auth","authChecked","setAuthChecked","isMounted","verificationInProgress","verifyToken","console","log","token","localStorage","getItem","refreshToken","response","post","expires_at","data","user_type","access","refresh","error","code","removeItem","timeoutId","setTimeout","clearTimeout","login","credentials","tokens","remember_me","setItem","success","_error$response","_error$response$data","errorMessage","message","Error","refresh_token","logoutAllDevices","logout_all_devices","window","location","replace"],"sources":["C:/Users/Arman/Desktop/ktl-isp-billing-frontend-main/ktl-isp-billing-frontend-main/src/hooks/useAuth.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { loginStart, loginSuccess, loginFailure, \n  logout as logoutAction } from '../store/authSlice';\nimport api from '../services/api';\n\nexport const useAuth = () => {\n  const dispatch = useDispatch();\n  const { user, isAuthenticated, loading } = useSelector((state) => state.auth);\n  const [authChecked, setAuthChecked] = useState(false);\n\n  // Verify token on mount with improved deduplication\n  useEffect(() => {\n    let isMounted = true;\n    let verificationInProgress = false;\n\n    const verifyToken = async () => {\n      if (verificationInProgress) {\n        console.log('Verification already in progress, skipping...');\n        return;\n      }\n\n      const token = localStorage.getItem('authToken');\n      const refreshToken = localStorage.getItem('refreshToken');\n\n      if (!token || !refreshToken) {\n        if (isMounted) {\n          setAuthChecked(true);\n        }\n        return;\n      }\n\n      verificationInProgress = true;\n\n      try {\n        console.log('Starting token verification...');\n        // Verify token with backend\n        const response = await api.post('/auth/verify/', {});\n        const { user, expires_at } = response.data.data;\n\n        console.log('Token verification successful, updating state...');\n        console.log('User data from API:', user);\n        console.log('User type:', user?.user_type);\n\n        // Update Redux state with verified user data\n        dispatch(loginSuccess({\n          user,\n          access: token,\n          refresh: refreshToken,\n          expires_at\n        }));\n\n        console.log('Redux state updated with user data');\n      } catch (error) {\n        if (error.code === 'ERR_CANCELED') {\n          console.log('Token verification was canceled (duplicate request)');\n          return;\n        }\n\n        console.error('Token verification failed:', error);\n        // Token is invalid, clear local storage and Redux state\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('rememberMe');\n        dispatch(loginFailure('Session expired'));\n      } finally {\n        verificationInProgress = false;\n        if (isMounted) {\n          setAuthChecked(true);\n        }\n      }\n    };\n\n    // Use a longer delay to ensure all components are mounted\n    const timeoutId = setTimeout(verifyToken, 200);\n\n    return () => {\n      isMounted = false;\n      clearTimeout(timeoutId);\n    };\n  }, [dispatch]);\n\n\n\n  const login = async (credentials) => {\n    try {\n      dispatch(loginStart());\n      const response = await api.post('/auth/login/', credentials);\n      const { user, tokens, remember_me, expires_at } = response.data.data;\n\n      // Store tokens and user data\n      localStorage.setItem('authToken', tokens.access);\n      localStorage.setItem('refreshToken', tokens.refresh);\n      if (remember_me) {\n        localStorage.setItem('rememberMe', 'true');\n      }\n\n      dispatch(loginSuccess({\n        user,\n        access: tokens.access,\n        refresh: tokens.refresh,\n        expires_at\n      }));\n\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Login failed';\n      dispatch(loginFailure(errorMessage));\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await api.post('/auth/refresh/', {\n        refresh_token: refreshToken\n      });\n\n      const { tokens, expires_at } = response.data.data;\n\n      // Update tokens\n      localStorage.setItem('authToken', tokens.access);\n      localStorage.setItem('refreshToken', tokens.refresh);\n\n      // Update Redux state with current user data\n      dispatch(loginSuccess({\n        user: user, // Keep existing user data\n        access: tokens.access,\n        refresh: tokens.refresh,\n        expires_at\n      }));\n\n      return { success: true };\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      // If refresh fails, logout user\n      await logout();\n      return { success: false, error: 'Session expired' };\n    }\n  };\n\n  const logout = async (logoutAllDevices = false) => {\n    try {\n      console.log('Starting logout process...');\n      const refreshToken = localStorage.getItem('refreshToken');\n      console.log('Refresh token found:', !!refreshToken);\n\n      if (refreshToken) {\n        console.log('Calling logout API...');\n        await api.post('/auth/logout/', {\n          refresh_token: refreshToken,\n          logout_all_devices: logoutAllDevices\n        });\n        console.log('Logout API call successful');\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with logout even if API call fails\n    }\n\n    console.log('Clearing local storage and Redux state...');\n    // Clear local storage\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('rememberMe');\n\n    // Clear Redux state\n    dispatch(logout());\n\n    // Reset auth checked state for next login\n    setAuthChecked(false);\n\n    console.log('Redirecting to login...');\n    // Force redirect to login\n    window.location.replace('/login');\n  };\n\n  return {\n    user,\n    isAuthenticated: isAuthenticated || false,\n    loading: loading || false,\n    authChecked,\n    login,\n    logout,\n    refreshToken,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}