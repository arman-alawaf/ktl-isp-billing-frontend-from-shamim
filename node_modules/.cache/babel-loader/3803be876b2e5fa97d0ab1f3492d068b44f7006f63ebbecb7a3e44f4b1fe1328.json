{"ast":null,"code":"// src/store/themeSlice.js - Production optimized without debug logs\nimport { createSlice } from '@reduxjs/toolkit';\nconst getInitialTheme = () => {\n  // Check localStorage first\n  const savedTheme = localStorage.getItem('theme');\n  if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n    return savedTheme;\n  }\n\n  // Fall back to system preference\n  if (typeof window !== 'undefined') {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n\n  // Default to dark\n  return 'dark';\n};\nconst getSystemPreference = () => {\n  if (typeof window !== 'undefined') {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n  return 'dark';\n};\nconst initialState = {\n  theme: getInitialTheme(),\n  systemPreference: getSystemPreference()\n};\nconst themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    toggleTheme: state => {\n      const newTheme = state.theme === 'dark' ? 'light' : 'dark';\n      state.theme = newTheme;\n      localStorage.setItem('theme', newTheme);\n\n      // Only log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Theme toggled to:', newTheme);\n      }\n    },\n    setTheme: (state, action) => {\n      const newTheme = action.payload;\n      if (newTheme === 'light' || newTheme === 'dark') {\n        state.theme = newTheme;\n        localStorage.setItem('theme', newTheme);\n\n        // Only log in development\n        if (process.env.NODE_ENV === 'development') {\n          console.log('Theme set to:', newTheme);\n        }\n      }\n    },\n    setSystemPreference: (state, action) => {\n      state.systemPreference = action.payload;\n    }\n  }\n});\nexport const {\n  toggleTheme,\n  setTheme,\n  setSystemPreference\n} = themeSlice.actions;\nexport default themeSlice.reducer;","map":{"version":3,"names":["createSlice","getInitialTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","getSystemPreference","initialState","theme","systemPreference","themeSlice","name","reducers","toggleTheme","state","newTheme","setItem","process","env","NODE_ENV","console","log","setTheme","action","payload","setSystemPreference","actions","reducer"],"sources":["C:/Users/Arman/Desktop/ktl-isp-billing-frontend-main/ktl-isp-billing-frontend-main/src/store/themeSlice.js"],"sourcesContent":["// src/store/themeSlice.js - Production optimized without debug logs\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst getInitialTheme = () => {\n  // Check localStorage first\n  const savedTheme = localStorage.getItem('theme');\n  if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n    return savedTheme;\n  }\n  \n  // Fall back to system preference\n  if (typeof window !== 'undefined') {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n  \n  // Default to dark\n  return 'dark';\n};\n\nconst getSystemPreference = () => {\n  if (typeof window !== 'undefined') {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n  return 'dark';\n};\n\nconst initialState = {\n  theme: getInitialTheme(),\n  systemPreference: getSystemPreference(),\n};\n\nconst themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    toggleTheme: (state) => {\n      const newTheme = state.theme === 'dark' ? 'light' : 'dark';\n      state.theme = newTheme;\n      localStorage.setItem('theme', newTheme);\n      \n      // Only log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Theme toggled to:', newTheme);\n      }\n    },\n    setTheme: (state, action) => {\n      const newTheme = action.payload;\n      if (newTheme === 'light' || newTheme === 'dark') {\n        state.theme = newTheme;\n        localStorage.setItem('theme', newTheme);\n        \n        // Only log in development\n        if (process.env.NODE_ENV === 'development') {\n          console.log('Theme set to:', newTheme);\n        }\n      }\n    },\n    setSystemPreference: (state, action) => {\n      state.systemPreference = action.payload;\n    },\n  },\n});\n\nexport const { toggleTheme, setTheme, setSystemPreference } = themeSlice.actions;\nexport default themeSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B;EACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAChD,IAAIF,UAAU,KAAKA,UAAU,KAAK,OAAO,IAAIA,UAAU,KAAK,MAAM,CAAC,EAAE;IACnE,OAAOA,UAAU;EACnB;;EAEA;EACA,IAAI,OAAOG,MAAM,KAAK,WAAW,EAAE;IACjC,OAAOA,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO;EACrF;;EAEA;EACA,OAAO,MAAM;AACf,CAAC;AAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC,IAAI,OAAOH,MAAM,KAAK,WAAW,EAAE;IACjC,OAAOA,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO;EACrF;EACA,OAAO,MAAM;AACf,CAAC;AAED,MAAME,YAAY,GAAG;EACnBC,KAAK,EAAET,eAAe,CAAC,CAAC;EACxBU,gBAAgB,EAAEH,mBAAmB,CAAC;AACxC,CAAC;AAED,MAAMI,UAAU,GAAGZ,WAAW,CAAC;EAC7Ba,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,QAAQ,EAAE;IACRC,WAAW,EAAGC,KAAK,IAAK;MACtB,MAAMC,QAAQ,GAAGD,KAAK,CAACN,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;MAC1DM,KAAK,CAACN,KAAK,GAAGO,QAAQ;MACtBd,YAAY,CAACe,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;;MAEvC;MACA,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1CC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,QAAQ,CAAC;MAC5C;IACF,CAAC;IACDO,QAAQ,EAAEA,CAACR,KAAK,EAAES,MAAM,KAAK;MAC3B,MAAMR,QAAQ,GAAGQ,MAAM,CAACC,OAAO;MAC/B,IAAIT,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;QAC/CD,KAAK,CAACN,KAAK,GAAGO,QAAQ;QACtBd,YAAY,CAACe,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;;QAEvC;QACA,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;UAC1CC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,QAAQ,CAAC;QACxC;MACF;IACF,CAAC;IACDU,mBAAmB,EAAEA,CAACX,KAAK,EAAES,MAAM,KAAK;MACtCT,KAAK,CAACL,gBAAgB,GAAGc,MAAM,CAACC,OAAO;IACzC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEX,WAAW;EAAES,QAAQ;EAAEG;AAAoB,CAAC,GAAGf,UAAU,CAACgB,OAAO;AAChF,eAAehB,UAAU,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}