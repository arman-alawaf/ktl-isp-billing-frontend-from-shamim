{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTheme.js - Production ready without debug logs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleTheme, setTheme, setSystemPreference } from '../store/themeSlice';\nimport { useEffect } from 'react';\nexport const useTheme = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    theme,\n    systemPreference\n  } = useSelector(state => state.theme);\n  useEffect(() => {\n    // Apply theme to document root and body\n    const root = document.documentElement;\n    const body = document.body;\n\n    // Remove all theme classes first\n    root.classList.remove('light', 'dark');\n    body.classList.remove('light', 'dark');\n\n    // Add the current theme class\n    root.classList.add(theme);\n    body.classList.add(theme);\n\n    // Also set data attribute for more specific targeting\n    root.setAttribute('data-theme', theme);\n\n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Theme applied:', theme);\n    }\n  }, [theme]);\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      dispatch(setSystemPreference(e.matches ? 'dark' : 'light'));\n    };\n\n    // Set initial system preference\n    dispatch(setSystemPreference(mediaQuery.matches ? 'dark' : 'light'));\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [dispatch]);\n  const toggle = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Toggling theme from', theme, 'to', newTheme);\n    }\n    dispatch(toggleTheme());\n  };\n  const setThemeMode = newTheme => {\n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Setting theme to:', newTheme);\n    }\n    dispatch(setTheme(newTheme));\n  };\n  return {\n    theme,\n    systemPreference,\n    toggle,\n    setTheme: setThemeMode,\n    isDark: theme === 'dark',\n    isLight: theme === 'light'\n  };\n};\n_s(useTheme, \"qujYG1z/eM899oV39fdryD4wVEQ=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useSelector","useDispatch","toggleTheme","setTheme","setSystemPreference","useEffect","useTheme","_s","dispatch","theme","systemPreference","state","root","document","documentElement","body","classList","remove","add","setAttribute","process","env","NODE_ENV","console","log","mediaQuery","window","matchMedia","handleChange","e","matches","addEventListener","removeEventListener","toggle","newTheme","setThemeMode","isDark","isLight"],"sources":["C:/Users/Arman/Desktop/ktl-isp-billing-frontend-main/ktl-isp-billing-frontend-main/src/hooks/useTheme.js"],"sourcesContent":["// src/hooks/useTheme.js - Production ready without debug logs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleTheme, setTheme, setSystemPreference } from '../store/themeSlice';\nimport { useEffect } from 'react';\n\nexport const useTheme = () => {\n  const dispatch = useDispatch();\n  const { theme, systemPreference } = useSelector((state) => state.theme);\n\n  useEffect(() => {\n    // Apply theme to document root and body\n    const root = document.documentElement;\n    const body = document.body;\n    \n    // Remove all theme classes first\n    root.classList.remove('light', 'dark');\n    body.classList.remove('light', 'dark');\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    body.classList.add(theme);\n    \n    // Also set data attribute for more specific targeting\n    root.setAttribute('data-theme', theme);\n    \n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Theme applied:', theme);\n    }\n  }, [theme]);\n\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      dispatch(setSystemPreference(e.matches ? 'dark' : 'light'));\n    };\n\n    // Set initial system preference\n    dispatch(setSystemPreference(mediaQuery.matches ? 'dark' : 'light'));\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [dispatch]);\n\n  const toggle = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Toggling theme from', theme, 'to', newTheme);\n    }\n    dispatch(toggleTheme());\n  };\n\n  const setThemeMode = (newTheme) => {\n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Setting theme to:', newTheme);\n    }\n    dispatch(setTheme(newTheme));\n  };\n\n  return {\n    theme,\n    systemPreference,\n    toggle,\n    setTheme: setThemeMode,\n    isDark: theme === 'dark',\n    isLight: theme === 'light',\n  };\n};"],"mappings":";AAAA;AACA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ,qBAAqB;AAChF,SAASC,SAAS,QAAQ,OAAO;AAEjC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEQ,KAAK;IAAEC;EAAiB,CAAC,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACF,KAAK,CAAC;EAEvEJ,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,IAAI,GAAGC,QAAQ,CAACC,eAAe;IACrC,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI;;IAE1B;IACAH,IAAI,CAACI,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IACtCF,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;;IAEtC;IACAL,IAAI,CAACI,SAAS,CAACE,GAAG,CAACT,KAAK,CAAC;IACzBM,IAAI,CAACC,SAAS,CAACE,GAAG,CAACT,KAAK,CAAC;;IAEzB;IACAG,IAAI,CAACO,YAAY,CAAC,YAAY,EAAEV,KAAK,CAAC;;IAEtC;IACA,IAAIW,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEf,KAAK,CAAC;IACtC;EACF,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXJ,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,UAAU,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMC,YAAY,GAAIC,CAAC,IAAK;MAC1BrB,QAAQ,CAACJ,mBAAmB,CAACyB,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;IAC7D,CAAC;;IAED;IACAtB,QAAQ,CAACJ,mBAAmB,CAACqB,UAAU,CAACK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;IAEpEL,UAAU,CAACM,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACnD,OAAO,MAAMH,UAAU,CAACO,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;EACrE,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,MAAMyB,MAAM,GAAGA,CAAA,KAAM;IACnB,MAAMC,QAAQ,GAAGzB,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;IACpD;IACA,IAAIW,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEf,KAAK,EAAE,IAAI,EAAEyB,QAAQ,CAAC;IAC3D;IACA1B,QAAQ,CAACN,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC;EAED,MAAMiC,YAAY,GAAID,QAAQ,IAAK;IACjC;IACA,IAAId,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,QAAQ,CAAC;IAC5C;IACA1B,QAAQ,CAACL,QAAQ,CAAC+B,QAAQ,CAAC,CAAC;EAC9B,CAAC;EAED,OAAO;IACLzB,KAAK;IACLC,gBAAgB;IAChBuB,MAAM;IACN9B,QAAQ,EAAEgC,YAAY;IACtBC,MAAM,EAAE3B,KAAK,KAAK,MAAM;IACxB4B,OAAO,EAAE5B,KAAK,KAAK;EACrB,CAAC;AACH,CAAC;AAACF,EAAA,CAjEWD,QAAQ;EAAA,QACFL,WAAW,EACQD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}