{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport api, { ENDPOINTS } from './api';\nimport { toast } from 'react-hot-toast';\n\n// Query keys for cache management\nexport const ORGANIZATION_QUERY_KEYS = {\n  all: ['organizations'],\n  lists: () => [...ORGANIZATION_QUERY_KEYS.all, 'list'],\n  list: filters => [...ORGANIZATION_QUERY_KEYS.lists(), {\n    filters\n  }],\n  details: () => [...ORGANIZATION_QUERY_KEYS.all, 'detail'],\n  detail: id => [...ORGANIZATION_QUERY_KEYS.details(), id]\n};\n\n// Organization API service functions\nexport const organizationService = {\n  // Fetch organizations\n  getOrganizations: async (params = {}) => {\n    const response = await api.get(ENDPOINTS.ORGANIZATIONS.LIST, {\n      params\n    });\n    return response.data;\n  },\n  // Get single organization\n  getOrganization: async organizationId => {\n    const response = await api.get(ENDPOINTS.ORGANIZATIONS.DETAIL(organizationId));\n    return response.data;\n  },\n  // Create organization\n  createOrganization: async organizationData => {\n    const response = await api.post(ENDPOINTS.ORGANIZATIONS.CREATE, organizationData);\n    return response.data;\n  },\n  // Update organization\n  updateOrganization: async ({\n    organizationId,\n    organizationData\n  }) => {\n    const response = await api.put(ENDPOINTS.ORGANIZATIONS.UPDATE(organizationId), organizationData);\n    return response.data;\n  },\n  // Delete organization\n  deleteOrganization: async organizationId => {\n    await api.delete(ENDPOINTS.ORGANIZATIONS.DELETE(organizationId));\n    return organizationId;\n  }\n};\n\n// React Query hooks for organization management\nexport const useOrganizations = (filters = {}) => {\n  _s();\n  return useQuery({\n    queryKey: ORGANIZATION_QUERY_KEYS.list(filters),\n    queryFn: () => organizationService.getOrganizations(filters),\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    cacheTime: 10 * 60 * 1000,\n    // 10 minutes\n    retry: 2,\n    refetchOnWindowFocus: false\n  });\n};\n_s(useOrganizations, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useOrganization = (organizationId, options = {}) => {\n  _s2();\n  return useQuery({\n    queryKey: ORGANIZATION_QUERY_KEYS.detail(organizationId),\n    queryFn: () => organizationService.getOrganization(organizationId),\n    enabled: !!organizationId,\n    staleTime: 5 * 60 * 1000,\n    ...options\n  });\n};\n\n// Mutations for organization operations\n_s2(useOrganization, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateOrganization = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: organizationService.createOrganization,\n    onSuccess: data => {\n      queryClient.invalidateQueries({\n        queryKey: ORGANIZATION_QUERY_KEYS.lists()\n      });\n      toast.success('Organization created successfully!');\n    },\n    onError: error => {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create organization';\n      toast.error(message);\n    }\n  });\n};\n_s3(useCreateOrganization, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateOrganization = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: organizationService.updateOrganization,\n    onSuccess: (data, variables) => {\n      queryClient.setQueryData(ORGANIZATION_QUERY_KEYS.detail(variables.organizationId), data);\n      queryClient.invalidateQueries({\n        queryKey: ORGANIZATION_QUERY_KEYS.lists()\n      });\n      toast.success('Organization updated successfully!');\n    },\n    onError: error => {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to update organization';\n      toast.error(message);\n    }\n  });\n};\n_s4(useUpdateOrganization, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useDeleteOrganization = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: organizationService.deleteOrganization,\n    onSuccess: deletedOrgId => {\n      queryClient.removeQueries({\n        queryKey: ORGANIZATION_QUERY_KEYS.detail(deletedOrgId)\n      });\n      queryClient.invalidateQueries({\n        queryKey: ORGANIZATION_QUERY_KEYS.lists()\n      });\n      toast.success('Organization deleted successfully!');\n    },\n    onError: error => {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to delete organization';\n      toast.error(message);\n    }\n  });\n};\n_s5(useDeleteOrganization, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQuery","useQueryClient","api","ENDPOINTS","toast","ORGANIZATION_QUERY_KEYS","all","lists","list","filters","details","detail","id","organizationService","getOrganizations","params","response","get","ORGANIZATIONS","LIST","data","getOrganization","organizationId","DETAIL","createOrganization","organizationData","post","CREATE","updateOrganization","put","UPDATE","deleteOrganization","delete","DELETE","useOrganizations","_s","queryKey","queryFn","staleTime","cacheTime","retry","refetchOnWindowFocus","useOrganization","options","_s2","enabled","useCreateOrganization","_s3","queryClient","mutationFn","onSuccess","invalidateQueries","success","onError","error","_error$response","_error$response$data","message","useUpdateOrganization","_s4","variables","setQueryData","_error$response2","_error$response2$data","useDeleteOrganization","_s5","deletedOrgId","removeQueries","_error$response3","_error$response3$data"],"sources":["C:/Users/Arman/Desktop/ktl-isp-billing-frontend-main/ktl-isp-billing-frontend-main/src/services/organizationService.js"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport api, { ENDPOINTS } from './api';\nimport { toast } from 'react-hot-toast';\n\n// Query keys for cache management\nexport const ORGANIZATION_QUERY_KEYS = {\n  all: ['organizations'],\n  lists: () => [...ORGANIZATION_QUERY_KEYS.all, 'list'],\n  list: (filters) => [...ORGANIZATION_QUERY_KEYS.lists(), { filters }],\n  details: () => [...ORGANIZATION_QUERY_KEYS.all, 'detail'],\n  detail: (id) => [...ORGANIZATION_QUERY_KEYS.details(), id],\n};\n\n// Organization API service functions\nexport const organizationService = {\n  // Fetch organizations\n  getOrganizations: async (params = {}) => {\n    const response = await api.get(ENDPOINTS.ORGANIZATIONS.LIST, { params });\n    return response.data;\n  },\n\n  // Get single organization\n  getOrganization: async (organizationId) => {\n    const response = await api.get(ENDPOINTS.ORGANIZATIONS.DETAIL(organizationId));\n    return response.data;\n  },\n\n  // Create organization\n  createOrganization: async (organizationData) => {\n    const response = await api.post(ENDPOINTS.ORGANIZATIONS.CREATE, organizationData);\n    return response.data;\n  },\n\n  // Update organization\n  updateOrganization: async ({ organizationId, organizationData }) => {\n    const response = await api.put(ENDPOINTS.ORGANIZATIONS.UPDATE(organizationId), organizationData);\n    return response.data;\n  },\n\n  // Delete organization\n  deleteOrganization: async (organizationId) => {\n    await api.delete(ENDPOINTS.ORGANIZATIONS.DELETE(organizationId));\n    return organizationId;\n  }\n};\n\n// React Query hooks for organization management\nexport const useOrganizations = (filters = {}) => {\n  return useQuery({\n    queryKey: ORGANIZATION_QUERY_KEYS.list(filters),\n    queryFn: () => organizationService.getOrganizations(filters),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    cacheTime: 10 * 60 * 1000, // 10 minutes\n    retry: 2,\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useOrganization = (organizationId, options = {}) => {\n  return useQuery({\n    queryKey: ORGANIZATION_QUERY_KEYS.detail(organizationId),\n    queryFn: () => organizationService.getOrganization(organizationId),\n    enabled: !!organizationId,\n    staleTime: 5 * 60 * 1000,\n    ...options\n  });\n};\n\n// Mutations for organization operations\nexport const useCreateOrganization = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: organizationService.createOrganization,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ORGANIZATION_QUERY_KEYS.lists() });\n      toast.success('Organization created successfully!');\n    },\n    onError: (error) => {\n      const message = error.response?.data?.message || 'Failed to create organization';\n      toast.error(message);\n    }\n  });\n};\n\nexport const useUpdateOrganization = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: organizationService.updateOrganization,\n    onSuccess: (data, variables) => {\n      queryClient.setQueryData(\n        ORGANIZATION_QUERY_KEYS.detail(variables.organizationId),\n        data\n      );\n      queryClient.invalidateQueries({ queryKey: ORGANIZATION_QUERY_KEYS.lists() });\n      toast.success('Organization updated successfully!');\n    },\n    onError: (error) => {\n      const message = error.response?.data?.message || 'Failed to update organization';\n      toast.error(message);\n    }\n  });\n};\n\nexport const useDeleteOrganization = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: organizationService.deleteOrganization,\n    onSuccess: (deletedOrgId) => {\n      queryClient.removeQueries({ queryKey: ORGANIZATION_QUERY_KEYS.detail(deletedOrgId) });\n      queryClient.invalidateQueries({ queryKey: ORGANIZATION_QUERY_KEYS.lists() });\n      toast.success('Organization deleted successfully!');\n    },\n    onError: (error) => {\n      const message = error.response?.data?.message || 'Failed to delete organization';\n      toast.error(message);\n    }\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}