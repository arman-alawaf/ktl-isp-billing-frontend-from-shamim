{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  metrics: {\n    activeUsers: {\n      value: 0,\n      change: 0\n    },\n    zones: {\n      value: 0,\n      change: 0\n    },\n    sdtTerminals: {\n      value: 0,\n      change: 0\n    },\n    revenue: {\n      value: '৳0',\n      change: 0\n    }\n  },\n  onlineUsersByInterface: [],\n  zones: [],\n  loading: false,\n  error: null,\n  lastUpdated: null\n};\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    fetchDashboardStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchDashboardSuccess: (state, action) => {\n      state.loading = false;\n      state.metrics = action.payload.metrics;\n      state.onlineUsersByInterface = action.payload.onlineUsersByInterface;\n      state.zones = action.payload.zones;\n      state.lastUpdated = new Date().toISOString();\n    },\n    fetchDashboardFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateMetric: (state, action) => {\n      const {\n        metric,\n        value,\n        change\n      } = action.payload;\n      if (state.metrics[metric]) {\n        state.metrics[metric] = {\n          value,\n          change\n        };\n      }\n    },\n    clearDashboardError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  fetchDashboardStart,\n  fetchDashboardSuccess,\n  fetchDashboardFailure,\n  updateMetric,\n  clearDashboardError\n} = dashboardSlice.actions;\nexport default dashboardSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","metrics","activeUsers","value","change","zones","sdtTerminals","revenue","onlineUsersByInterface","loading","error","lastUpdated","dashboardSlice","name","reducers","fetchDashboardStart","state","fetchDashboardSuccess","action","payload","Date","toISOString","fetchDashboardFailure","updateMetric","metric","clearDashboardError","actions","reducer"],"sources":["C:/Users/Arman/Desktop/ktl-isp-billing-frontend-main/ktl-isp-billing-frontend-main/src/store/dasboardSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  metrics: {\n    activeUsers: { value: 0, change: 0 },\n    zones: { value: 0, change: 0 },\n    sdtTerminals: { value: 0, change: 0 },\n    revenue: { value: '৳0', change: 0 }\n  },\n  onlineUsersByInterface: [],\n  zones: [],\n  loading: false,\n  error: null,\n  lastUpdated: null,\n};\n\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    fetchDashboardStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchDashboardSuccess: (state, action) => {\n      state.loading = false;\n      state.metrics = action.payload.metrics;\n      state.onlineUsersByInterface = action.payload.onlineUsersByInterface;\n      state.zones = action.payload.zones;\n      state.lastUpdated = new Date().toISOString();\n    },\n    fetchDashboardFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateMetric: (state, action) => {\n      const { metric, value, change } = action.payload;\n      if (state.metrics[metric]) {\n        state.metrics[metric] = { value, change };\n      }\n    },\n    clearDashboardError: (state) => {\n      state.error = null;\n    },\n  },\n});\n\nexport const { \n  fetchDashboardStart, \n  fetchDashboardSuccess, \n  fetchDashboardFailure, \n  updateMetric, \n  clearDashboardError \n} = dashboardSlice.actions;\nexport default dashboardSlice.reducer;\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE;IACPC,WAAW,EAAE;MAAEC,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACpCC,KAAK,EAAE;MAAEF,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IAC9BE,YAAY,EAAE;MAAEH,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACrCG,OAAO,EAAE;MAAEJ,KAAK,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAE;EACpC,CAAC;EACDI,sBAAsB,EAAE,EAAE;EAC1BH,KAAK,EAAE,EAAE;EACTI,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,cAAc,GAAGb,WAAW,CAAC;EACjCc,IAAI,EAAE,WAAW;EACjBb,YAAY;EACZc,QAAQ,EAAE;IACRC,mBAAmB,EAAGC,KAAK,IAAK;MAC9BA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC;IACDO,qBAAqB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACf,OAAO,GAAGiB,MAAM,CAACC,OAAO,CAAClB,OAAO;MACtCe,KAAK,CAACR,sBAAsB,GAAGU,MAAM,CAACC,OAAO,CAACX,sBAAsB;MACpEQ,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACC,OAAO,CAACd,KAAK;MAClCW,KAAK,CAACL,WAAW,GAAG,IAAIS,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC9C,CAAC;IACDC,qBAAqB,EAAEA,CAACN,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDI,YAAY,EAAEA,CAACP,KAAK,EAAEE,MAAM,KAAK;MAC/B,MAAM;QAAEM,MAAM;QAAErB,KAAK;QAAEC;MAAO,CAAC,GAAGc,MAAM,CAACC,OAAO;MAChD,IAAIH,KAAK,CAACf,OAAO,CAACuB,MAAM,CAAC,EAAE;QACzBR,KAAK,CAACf,OAAO,CAACuB,MAAM,CAAC,GAAG;UAAErB,KAAK;UAAEC;QAAO,CAAC;MAC3C;IACF,CAAC;IACDqB,mBAAmB,EAAGT,KAAK,IAAK;MAC9BA,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXK,mBAAmB;EACnBE,qBAAqB;EACrBK,qBAAqB;EACrBC,YAAY;EACZE;AACF,CAAC,GAAGb,cAAc,CAACc,OAAO;AAC1B,eAAed,cAAc,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}